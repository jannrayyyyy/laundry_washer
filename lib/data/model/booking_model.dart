// ignore_for_file: public_member_api_docs, sort_constructors_first

import '../../domain/entity/booking_entity.dart';
import 'customer_model.dart';

class BookingModel extends BookingEntity {
  BookingModel({
    super.uid,
    required super.category,
    super.quantity,
    super.kg,
    required super.payment,
    required super.paymentMethod,
    required super.pickUpDate,
    required super.deliveryDate,
    required super.createdBy,
    required super.createdAt,
    required super.load,
    required super.isCompleted,
    super.riderId,
    super.customer,
    required super.bookingStatus,
    super.modeOfPayment,
    required super.scheduleType,
    super.proofs,
    super.isFree,
    super.reason,
    super.note,
    super.pickUpAddress,
    super.pickUpCoordinates,
    super.chargeFee,
    super.isSelected,
  });

  BookingModel copyWith({
    String? uid,
    String? category,
    int? quantity,
    int? kg,
    double? payment,
    String? paymentMethod,
    String? pickUpDate,
    String? deliveryDate,
    String? createdBy,
    String? createdAt,
    int? load,
    Map? coordinates,
    bool? isCompleted,
    String? riderId,
    int? status,
    CustomerModel? customer,
    String? paymentProof,
    String? deliveryProof,
    int? bookingStatus,
    String? modeOfPayment,
    bool? isSelected,
  }) {
    return BookingModel(
      uid: uid ?? this.uid,
      category: category ?? this.category,
      quantity: quantity ?? this.quantity,
      kg: kg ?? this.kg,
      payment: payment ?? this.payment,
      paymentMethod: paymentMethod ?? this.paymentMethod,
      pickUpDate: pickUpDate ?? this.pickUpDate,
      deliveryDate: deliveryDate ?? this.deliveryDate,
      createdBy: createdBy ?? this.createdBy,
      createdAt: createdAt ?? this.createdAt,
      load: load ?? this.load,
      isCompleted: isCompleted ?? this.isCompleted,
      riderId: riderId ?? this.riderId,
      customer: customer ?? this.customer,
      bookingStatus: bookingStatus ?? this.bookingStatus,
      modeOfPayment: modeOfPayment,
      scheduleType: scheduleType,
      isFree: false,
      isSelected: isSelected,
    );
  }

  factory BookingModel.fromMap(Map<String, dynamic> map) {
    return BookingModel(
      uid: map["uid"],
      category: map["category"],
      quantity: map["quantity"],
      kg: map["kg"],
      payment: map["payment"],
      paymentMethod: map["paymentMethod"],
      pickUpDate: map["pickUpDate"],
      deliveryDate: map["deliveryDate"],
      createdBy: map["createdBy"],
      createdAt: map["createdAt"],
      load: map['load'],
      isCompleted: map['isCompleted'],
      riderId: map['riderId'],
      bookingStatus: map['bookingStatus'],
      modeOfPayment: map['modeOfPayment'],
      scheduleType: map['scheduleType'],
      proofs: map['proofs'],
      isFree: map['isFree'],
      reason: map['reason'],
      note: map['note'],
      pickUpAddress: map['pickUpAddress'],
      pickUpCoordinates: map['pickUpCoordinates'],
    );
  }

  factory BookingModel.fromEntity(BookingEntity entity) {
    return BookingModel(
      uid: entity.uid,
      category: entity.category,
      quantity: entity.quantity,
      kg: entity.kg,
      payment: entity.payment,
      paymentMethod: entity.paymentMethod,
      pickUpDate: entity.pickUpDate,
      deliveryDate: entity.deliveryDate,
      createdBy: entity.createdBy,
      createdAt: entity.createdAt,
      load: entity.load,
      isCompleted: entity.isCompleted,
      riderId: entity.riderId,
      bookingStatus: entity.bookingStatus,
      modeOfPayment: entity.modeOfPayment,
      scheduleType: entity.scheduleType,
      proofs: entity.proofs,
      isFree: entity.isFree,
      reason: entity.reason,
      note: entity.note,
    );
  }

  Map<String, dynamic> toMap() => {
        'uid': uid,
        'category': category,
        'quantity': quantity,
        'kg': kg,
        'payment': payment,
        'paymentMethod': paymentMethod,
        'pickUpDate': pickUpDate,
        'deliveryDate': deliveryDate,
        'createdBy': createdBy,
        'createdAt': createdAt,
        'load': load,
        'riderId': riderId,
        'isCompleted': isCompleted,
        'bookingStatus': bookingStatus,
        'modeOfPayment': modeOfPayment,
        'scheduleType': scheduleType,
        'proofs': proofs,
        'isFree': isFree,
        'reason': reason,
        'note': note,
      };
}
